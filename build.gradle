plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.polarbookshop.catalog'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.3")
	set('testKeycloakVersion', "2.3.0")
	set('otelVersion', "1.17.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {
	imageName = "${project.name}"
	environment = [
			//'HTTP_PROXY' : 'http.docker.internal:3128',
			//'HTTPS_PROXY' : 'http.docker.internal:3128',
			'BP_JVM_VERSION' : '17.*'
	]
	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

springBoot {
	buildInfo()
}

tasks.named('test') {
	useJUnitPlatform()
}
